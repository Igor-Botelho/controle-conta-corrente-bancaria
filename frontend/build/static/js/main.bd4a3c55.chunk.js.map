{"version":3,"sources":["utils/index.js","utils/maskData.js","utils/maskValor.js","components/GraficoRendimentos/GraficoRendimentos.jsx","backend/api/reducer-factory.js","backend/api/request-factory.js","services/conta/conta.redux.js","services/registrar-deposito/registrar-deposito.js","services/transacao/transacao.js","components/Modal/ModalDoposito.jsx","components/Modal/ModalListagem.jsx","services/registrar-pagamento/registrar-pagamento.js","components/Modal/ModalPagamento.jsx","services/cliente/cliente.redux.js","services/registrar-resgate/registrar-resgate.js","components/Modal/ModalResgate.jsx","services/conta/conta.jsx","pages/index.jsx","App.js","reportWebVitals.js","store.js","index.js"],"names":["module","exports","maskData","require","maskValor","dataHora","split","data","hora","minuto","ano","mes","dia","valor","centavos","valorMascara","valorQuebrado","toString","tamanho","length","contador","i","GraficoRendimentos","saldo","rendimento","console","log","width","height","chartType","loader","options","title","pieHole","rootProps","reducerFactory","context","state","action","contextoFinal","type","payload","loading","dado","error","requestType","url","dados","contexto","a","Axios","get","params","status","post","contaId","status1","data1","requestFactory","loadconta","contaReducer","registrarDeposito","registrarDepositoReducer","consultarTransacoes","urlLoadOne","transacaoReducer","getInformacoesTransferencia","agencia","banco","cnpj","codigo","conta","nome","className","ModalDeposito","dispatch","useDispatch","useState","Deposito","setValor","modalShow","setModalShow","boleto","transferencia","preencherValor","operacao","setOperacao","handleInputChange","event","valorTotal","persist","inicial","placeholder","min","onChange","body","setBody","Button","onClick","Modal","show","onHide","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","responde","dadosTransferencia","transacaoDeposito","linhaDigitavel","ModalListagem","atualizacoes","to","map","transacao","index","tipo","dataHoraTransacao","registrarPagamento","registrarPagamentoReducer","ModalPgamento","mensagemValidacao","setMensagemValidacao","pagamento","valorPagamento","setValorPagamento","pagamentoRealizado","setPagamentoRealizado","inputs","target","name","value","registraBoleto","ValorAPagar","handleInputChangePagamento","ValidaBoleto","Object","values","valorAValidar","boletoTamanhoValido","boletoTemValor","valorBoleto","slice","Number","clienteReducer","registrarResgate","registrarResgateReducer","ModalResgate","resgate","resgatado","setResgatado","resgateAction","loadcliente","cliente","contasBancarias","numeroConta","Conta","useEffect","_id","useSelector","contaUsuario","transacoes","atualizacoesPaginaPrincipal","ModalPagamento","Index","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","deposito","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd4a3c55.chunk.js","sourcesContent":["module.exports = {\n  maskData: require(\"./maskData\"),\n  maskValor: require(\"./maskValor\"),\n};\n","module.exports = function maskData(dataHora) {\n  const [data, horario] = dataHora.split(\"T\");\n  const [hora, minuto] = horario.split(\":\");\n  const [ano, mes, dia] = data.split(\"-\");\n\n  return `${dia}/${mes}/${ano}  ${hora}:${minuto}`;\n};\n","module.exports = function maskValor(valor) {\n  let valorQuebrado = valor.toString().split(\"\");\n\n  let centavos;\n\n  let valorMascara;\n\n  const tamanho = valor.toString().length;\n  if (tamanho > 2) {\n    centavos = `${valorQuebrado[tamanho - 2]}${valorQuebrado[tamanho - 1]}`;\n\n    valorMascara = `${valorQuebrado[tamanho - 3]}`;\n\n    let contador = 1;\n\n    for (let i = tamanho - 4; i >= 0; i--) {\n      if (contador % 3 === 0 && contador != 0) {\n        valorMascara = `.${valorMascara}`;\n      }\n      valorMascara = `${valorQuebrado[i]}${valorMascara}`;\n      contador++;\n    }\n  } else if (tamanho < 2) {\n    valorMascara = `0`;\n    centavos = `0${valorQuebrado[tamanho - 1]}`;\n  } else {\n    valorMascara = `0`;\n    centavos = `${valorQuebrado[tamanho - 2]}${valorQuebrado[tamanho - 1]}`;\n  }\n\n  return `${valorMascara},${centavos}`;\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nfunction GraficoRendimentos({ saldo, rendimento }) {\n  console.log({ rendimento });\n\n  return (\n    <Chart\n      width={\"22rem\"}\n      height={\"22rem\"}\n      chartType=\"PieChart\"\n      loader={<div>Grafico</div>}\n      data={[\n        [\"Saldo\", \"Hours per Day\"],\n        [\"Saldo\", saldo],\n        [\"Rendimentos\", rendimento],\n      ]}\n      options={{\n        title: \"Rendimentos\",\n        pieHole: 0.4,\n      }}\n      rootProps={{ \"data-testid\": \"3\" }}\n    />\n  );\n}\n\nGraficoRendimentos.propTypes = {\n  saldo: PropTypes.number,\n  rendimento: PropTypes.number,\n};\n\nexport default GraficoRendimentos;\n","export const reducerFactory = (context) => {\n  return (state = {}, action) => {\n    const contextoFinal = action.context || context;\n\n    switch (action.type) {\n      case \"SUCCESS\":\n        if (context === action.context) {\n          if (action.payload) {\n            state = { loading: false, dado: action.payload };\n          }\n\n          return state;\n        }\n        return state;\n\n      case `${contextoFinal}_LIST_FAIL`:\n        return { loading: false, error: action.payload };\n      default:\n        return state;\n    }\n  };\n};\n","import Axios from \"axios\";\n\nasync function requestFactory(requestType, url, dados, contexto) {\n  //Criar tratamento de erros para as requisições\n  switch (requestType) {\n    case \"get\":\n      // eslint-disable-next-line no-case-declarations\n      const { status, data } = await Axios.get(url, { params: { dados } });\n\n      return {\n        type: \"SUCCESS\",\n        context: contexto,\n        payload: data,\n        status,\n      };\n\n    case \"post\":\n      // eslint-disable-next-line no-case-declarations\n      const { status: status1, data: data1 } = await Axios.post(url, {\n        valor: dados.valor,\n        contaId: dados.contaId,\n      });\n\n      return {\n        type: \"SUCCESS\",\n        context: contexto,\n        payload: data1,\n        status: status1,\n      };\n    default:\n      return \"Tipo de requisição não suportada\";\n  }\n}\n\nexport default requestFactory;\n","import { reducerFactory } from \"../../backend/api/reducer-factory\";\nimport requestFactory from \"../../backend/api/request-factory\";\n\nconst context = \"contaUsuario\";\n\nconst urlLoadOne = \"/api/conta\";\n\nexport const loadconta = (options) =>\n  requestFactory(\"get\", urlLoadOne, options, context);\n\nexport const contaReducer = reducerFactory(context);\n","import { reducerFactory } from \"../../backend/api/reducer-factory\";\nimport requestFactory from \"../../backend/api/request-factory\";\n\nconst context = \"deposito\";\n\nconst urlLoadOne = \"/api/depositar\";\n\nexport const registrarDeposito = (contaId, valor) =>\n  requestFactory(\"post\", urlLoadOne, { contaId, valor }, context);\n\nexport const registrarDepositoReducer = reducerFactory(context);\n","import { reducerFactory } from \"../../backend/api/reducer-factory\";\nimport requestFactory from \"../../backend/api/request-factory\";\n\nconst context = \"transacao\";\n\nconst urlLoadOne = (contaId) => `/api/transacao/${contaId}`;\n\nexport const consultarTransacoes = (contaId) =>\n  requestFactory(\"get\", urlLoadOne(contaId), {}, context);\n\nexport const transacaoReducer = reducerFactory(context);\n","import PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport CurrencyInput from \"react-currency-masked-input\";\nimport { useDispatch } from \"react-redux\";\nimport { loadconta } from \"../../services/conta/conta.redux\";\nimport { registrarDeposito } from \"../../services/registrar-deposito/registrar-deposito\";\nimport { consultarTransacoes } from \"../../services/transacao/transacao\";\nimport \"./modal.css\";\nfunction ModalDeposito({ contaId }) {\n  const dispatch = useDispatch();\n\n  const [valor, setValor] = useState({ Deposito: 0 });\n  const [modalShow, setModalShow] = useState(false);\n  const [operacao, setOperacao] = useState({\n    boleto: false,\n    transferencia: false,\n    preencherValor: true,\n  });\n\n  const handleInputChange = (event, valorTotal) => {\n    event.persist();\n    setValor(valorTotal);\n  };\n\n  const inicial = () => {\n    return (\n      <CurrencyInput\n        className=\"input-valor\"\n        type=\"number\"\n        placeholder=\"0.00\"\n        min=\"0.01\"\n        onChange={handleInputChange}\n      />\n    );\n  };\n\n  const [body, setBody] = useState(inicial());\n\n  return (\n    <div>\n      <Button className=\"operacao\" onClick={() => setModalShow(true)}>\n        Deposito\n      </Button>\n      <Modal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <span className=\"ver-mais\">Deposito</span>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"posicao-campo-preenchimento-valor\">\n          {body}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            className=\"modal-butom\"\n            onClick={() => {\n              setModalShow(false);\n              setOperacao({\n                transferencia: false,\n                boleto: false,\n                preencherValor: true,\n              });\n              setBody(inicial());\n            }}\n          >\n            Fechar\n          </Button>\n\n          {operacao.transferencia ? (\n            <Button\n              className=\"modal-butom\"\n              onClick={async () => {\n                setOperacao({ transferencia: false, boleto: false });\n                const { payload } = dispatch(\n                  await registrarDeposito(contaId, valor)\n                );\n\n                const [responde] = payload;\n\n                dispatch(await loadconta({}));\n                dispatch(await consultarTransacoes(contaId));\n\n                setBody(\n                  getInformacoesTransferencia(responde.dadosTransferencia)\n                );\n              }}\n            >\n              Tranferencia\n            </Button>\n          ) : null}\n\n          {operacao.boleto ? (\n            <Button\n              className=\"modal-butom\"\n              onClick={async () => {\n                setOperacao({ transferencia: false, boleto: false });\n                const dado = dispatch(await registrarDeposito(contaId, valor));\n                dispatch(await loadconta({}));\n\n                dispatch(await consultarTransacoes(contaId));\n                setBody(\n                  <div className=\"body\">\n                    <span className=\"informacoes-modal\">Linha Digitavel :</span>\n                    <span className=\"boleto\">\n                      {dado.payload[0].transacaoDeposito.linhaDigitavel}\n\n                      <p className=\"alet\">\n                        A transação de deposito por motivos de teste esta sendo\n                        refletida no saldo atual mas no bando de dados é salva\n                        como `pendente` esperando o pagamento ou transferencia\n                        do valor\n                      </p>\n                    </span>\n                  </div>\n                );\n              }}\n            >\n              Boleto\n            </Button>\n          ) : null}\n\n          {operacao.preencherValor ? (\n            <Button\n              className=\"modal-butom\"\n              onClick={async () => {\n                if (valor > 0) {\n                  setOperacao({\n                    boleto: true,\n                    transferencia: true,\n                    preencherValor: false,\n                  });\n                  setBody(`R$ ${valor}`);\n                }\n              }}\n            >\n              Confirmar\n            </Button>\n          ) : null}\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nfunction getInformacoesTransferencia({\n  agencia,\n  banco,\n  cnpj,\n  codigo,\n  conta,\n  nome,\n  valor,\n}) {\n  return (\n    <div>\n      <p className=\"informacoes-modal\">Informações para depósito</p>\n      <div>\n        <span>Agencia : </span>\n        <span>{agencia}</span>\n      </div>\n\n      <div>\n        <span>Banco : </span>\n        <span>{banco} </span>\n      </div>\n\n      <div>\n        <span>CNPJ : </span>\n        <span>{cnpj}</span>\n      </div>\n\n      <div>\n        <span>Cod : </span>\n        <span>{codigo}</span>\n      </div>\n\n      <div>\n        <span>Conta : </span>\n        <span>{conta}</span>\n      </div>\n\n      <div>\n        <span>Nome : </span>\n        <span>{nome}</span>\n      </div>\n\n      <div>\n        <span>Valor : </span>\n        <span>{valor}</span>\n      </div>\n\n      <p className=\"alet\">\n        A transação de deposito por motivos de teste esta sendo refletida no\n        saldo atual mas no bando de dados é salva como `pendente` esperando o\n        pagamento ou transferencia do valor\n      </p>\n    </div>\n  );\n}\n\nModalDeposito.propTypes = {\n  contaId: PropTypes.string,\n};\n\nexport default ModalDeposito;\n","import PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { maskData, maskValor } from \"../../utils\";\nimport \"./modal.css\";\n\nfunction ModalListagem({ atualizacoes }) {\n  const [modalShow, setModalShow] = useState(false);\n\n  return (\n    <div>\n      <Link to=\"\" className=\"ver-mais\" onClick={() => setModalShow(true)}>\n        Ver todas\n      </Link>\n      <Modal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <span className=\"ver-mais\">Ultimas atualizações</span>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {atualizacoes.map((transacao, index) => {\n            return (\n              <div key={index} className=\"item-atualizacao\">\n                <div className=\"informacoes\">\n                  <span>{transacao.tipo}</span>\n                  <span> {maskData(transacao.dataHoraTransacao)}</span>\n                </div>\n                <div className=\"informacoes\">\n                  <span>R${maskValor(transacao.valor)}</span>\n                  <span>{transacao.status}</span>\n                </div>\n              </div>\n            );\n          })}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"fechar-modal\" onClick={() => setModalShow(false)}>\n            Fechar\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nModalListagem.propTypes = {\n  atualizacoes: PropTypes.array,\n};\n\nexport default ModalListagem;\n","import { reducerFactory } from \"../../backend/api/reducer-factory\";\nimport requestFactory from \"../../backend/api/request-factory\";\n\nconst context = \"pagamento\";\n\nconst urlLoadOne = \"/api/pagamento\";\n\nexport const registrarPagamento = (contaId, valor) =>\n  requestFactory(\"post\", urlLoadOne, { contaId, valor }, context);\n\nexport const registrarPagamentoReducer = reducerFactory(context);\n","import PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport CurrencyInput from \"react-currency-masked-input\";\nimport { useDispatch } from \"react-redux\";\nimport { loadconta } from \"../../services/conta/conta.redux\";\nimport { registrarPagamento } from \"../../services/registrar-pagamento/registrar-pagamento\";\nimport { consultarTransacoes } from \"../../services/transacao/transacao\";\nimport \"./modal.css\";\n\nfunction ModalPgamento({ contaId }) {\n  const dispatch = useDispatch();\n\n  const [valor, setValor] = useState({});\n  const [modalShow, setModalShow] = useState(false);\n  const [mensagemValidacao, setMensagemValidacao] = useState(\"\");\n  const [valorPagamento, setValorPagamento] = useState({ pagamento: 0 });\n  const [pagamentoRealizado, setPagamentoRealizado] = useState(false);\n\n  const handleInputChange = (event, linhaDigitavel) => {\n    event.persist();\n\n    setValor(linhaDigitavel);\n    setMensagemValidacao(\"\");\n\n    setValor((inputs) => ({\n      ...inputs,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const inicial = () => {\n    return (\n      <div>\n        <input\n          className=\"input-valor\"\n          type=\"number\"\n          onChange={handleInputChange}\n          placeholder=\"Digite o numero do boleto\"\n        />\n        <ul className=\"boleto-exemplo-titulo\">\n          <li>\n            <p className=\"boleto-exemplo-geral\">\n              <small>Boleto exemplo com valor fixo:</small>\n              <br />\n              <b>00194444505123456987012159632500085920000001500</b>\n            </p>\n          </li>\n          <li>\n            <p className=\"boleto-exemplo-geral\">\n              <small>Boleto exemplo com valor digitavel:</small>\n              <br />\n              <b>00194444505123456987012159632500085920000000000</b>\n            </p>\n          </li>\n        </ul>\n      </div>\n    );\n  };\n\n  const registraBoleto = async (ValorAPagar) => {\n    const pagamento = dispatch(\n      await registrarPagamento(contaId, ValorAPagar * 100)\n    );\n\n    const [payload] = pagamento.payload;\n\n    if (payload && payload.error) {\n      setMensagemValidacao(payload.error);\n    } else {\n      setBody(\"Pagamento realizado com sucesso!\");\n\n      setPagamentoRealizado(true);\n\n      setValorPagamento({ pagamento: 0 });\n\n      dispatch(await loadconta({}));\n\n      dispatch(await consultarTransacoes(contaId));\n    }\n  };\n\n  const [body, setBody] = useState(inicial());\n\n  const handleInputChangePagamento = (event, valorTotal) => {\n    setMensagemValidacao(\"\");\n    event.persist();\n    setValorPagamento(valorTotal);\n  };\n\n  const ValidaBoleto = async () => {\n    const [valorAValidar] = Object.values(valor);\n\n    if (valorAValidar) {\n      let boletoTamanhoValido;\n\n      if (valorAValidar) {\n        boletoTamanhoValido = valorAValidar.length != 47;\n      }\n\n      if (boletoTamanhoValido) {\n        setMensagemValidacao(\n          \"Boleto com o tamanho incorreto, deve ter 47 digitos.\"\n        );\n      } else {\n        let boletoTemValor = false;\n        let ValorAPagar = 0;\n\n        if (valorAValidar) {\n          const valorBoleto = valorAValidar.slice(-10);\n\n          ValorAPagar = Number(valorBoleto);\n\n          boletoTemValor = ValorAPagar && ValorAPagar > 0;\n        }\n\n        if (boletoTemValor) {\n          {\n            registraBoleto(ValorAPagar);\n          }\n        } else {\n          setMensagemValidacao(\"\");\n\n          setBody(\n            <CurrencyInput\n              className=\"input-valor\"\n              type=\"number\"\n              placeholder=\"0.00\"\n              min=\"0.01\"\n              onChange={handleInputChangePagamento}\n            />\n          );\n        }\n      }\n      if (valorPagamento > 0) {\n        {\n          registraBoleto(valorPagamento);\n        }\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Button className=\"operacao\" onClick={() => setModalShow(true)}>\n        Pagamento\n      </Button>\n      <Modal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <span className=\"ver-mais\"> Digite o número do boleto</span>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"posicao-campo-preenchimento-valor\">\n          {body}\n          <p>{mensagemValidacao}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            className=\"modal-butom\"\n            onClick={() => {\n              setModalShow(false);\n              setMensagemValidacao(\"\");\n              setPagamentoRealizado(false);\n              setBody(inicial());\n            }}\n          >\n            Fechar\n          </Button>\n\n          {pagamentoRealizado === false ? (\n            <Button\n              className=\"modal-butom\"\n              onClick={async () => {\n                ValidaBoleto();\n              }}\n            >\n              Confirmar\n            </Button>\n          ) : null}\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nModalPgamento.propTypes = {\n  contaId: PropTypes.string,\n};\n\nexport default ModalPgamento;\n","import { reducerFactory } from \"../../backend/api/reducer-factory\";\nimport requestFactory from \"../../backend/api/request-factory\";\n\nconst context = \"cliente\";\n\nconst urlLoadOne = \"/api/cliente\";\n\nexport const loadcliente = (options) =>\n  requestFactory(\"get\", urlLoadOne, options, context);\n\nexport const clienteReducer = reducerFactory(context);\n","import { reducerFactory } from \"../../backend/api/reducer-factory\";\nimport requestFactory from \"../../backend/api/request-factory\";\n\nconst context = \"resgate\";\n\nconst urlLoadOne = \"/api/resgate\";\n\nexport const registrarResgate = (contaId, valor) =>\n  requestFactory(\"post\", urlLoadOne, { contaId, valor }, context);\n\nexport const registrarResgateReducer = reducerFactory(context);\n","import PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport CurrencyInput from \"react-currency-masked-input\";\nimport { useDispatch } from \"react-redux\";\nimport { loadcliente } from \"../../services/cliente/cliente.redux\";\nimport { loadconta } from \"../../services/conta/conta.redux\";\nimport { registrarResgate } from \"../../services/registrar-resgate/registrar-resgate\";\nimport { consultarTransacoes } from \"../../services/transacao/transacao\";\nimport \"./modal.css\";\n\nfunction ModalResgate({ contaId }) {\n  const dispatch = useDispatch();\n\n  const [valor, setValor] = useState({ resgate: 0 });\n  const [modalShow, setModalShow] = useState(false);\n  const [mensagemValidacao, setMensagemValidacao] = useState(\"\");\n  const [resgatado, setResgatado] = useState(false);\n\n  const handleInputChange = (event, valorTotal) => {\n    setMensagemValidacao(\"\");\n    event.persist();\n    setValor(valorTotal);\n  };\n\n  const inicial = () => {\n    return (\n      <CurrencyInput\n        className=\"input-valor\"\n        type=\"number\"\n        placeholder=\"0.00\"\n        min=\"0.01\"\n        onChange={handleInputChange}\n      />\n    );\n  };\n\n  const [body, setBody] = useState(inicial());\n\n  const resgateAction = async () => {\n    const pagamento = dispatch(await registrarResgate(contaId, valor * 100));\n\n    const [payload] = pagamento.payload;\n\n    console.log(\"ERRRRRRROOO : \", payload);\n\n    if (payload && payload.error) {\n      setMensagemValidacao(payload.error);\n    } else {\n      setMensagemValidacao(\"\");\n\n      //setModalShow(false);\n\n      dispatch(await loadconta({}));\n      const cliente = dispatch(await loadcliente());\n\n      console.log(\"CLIIIIIIENTE : \", cliente.payload);\n\n      const [contasBancarias] = cliente.payload.contasBancarias;\n\n      console.log(\"$$$$$$$ : \", contasBancarias);\n\n      dispatch(await consultarTransacoes(contaId));\n      setResgatado(true);\n      setBody(\n        <div>\n          <p className=\"informacoes-modal\">\n            A transferencia foi realizada para a conta\n          </p>\n          <p>Banco:{contasBancarias.banco}</p>\n          <p>NUmero Conta:{contasBancarias.numeroConta}</p>\n          <p>Agencia:{contasBancarias.agencia}</p>\n          <p>Tipo:{contasBancarias.tipo}</p>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Button className=\"operacao\" onClick={() => setModalShow(true)}>\n        Resgate\n      </Button>\n      <Modal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <span className=\"ver-mais\">resgate</span>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"posicao-campo-preenchimento-valor\">\n          {body}\n          <p>{mensagemValidacao}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            className=\"modal-butom\"\n            onClick={() => {\n              setMensagemValidacao(\"\");\n              setModalShow(false);\n              setResgatado(false);\n              setBody(inicial());\n            }}\n          >\n            Fechar\n          </Button>\n\n          {resgatado === false ? (\n            <Button\n              className=\"modal-butom\"\n              onClick={async () => {\n                resgateAction();\n              }}\n            >\n              Confirmar\n            </Button>\n          ) : null}\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nModalResgate.propTypes = {\n  contaId: PropTypes.string,\n};\n\nexport default ModalResgate;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport GraficoRendimentos from \"../../components/GraficoRendimentos/GraficoRendimentos\";\nimport ModalDeposito from \"../../components/Modal/ModalDoposito\";\nimport ModalListagem from \"../../components/Modal/ModalListagem\";\nimport ModalPagamento from \"../../components/Modal/ModalPagamento\";\nimport ModalResgate from \"../../components/Modal/ModalResgate\";\nimport { maskData, maskValor } from \"../../utils\";\nimport { consultarTransacoes } from \"../transacao/transacao\";\nimport \"./conta.css\";\nimport { loadconta } from \"./conta.redux\";\n\nfunction Conta() {\n  const dispatch = useDispatch();\n\n  useEffect(async () => {\n    const conta = dispatch(await loadconta({}));\n    dispatch(await consultarTransacoes(conta.payload._id));\n  }, []);\n\n  const conta = useSelector((state) => {\n    return state.contaUsuario.dado;\n  });\n\n  const transacoes = useSelector((state) => {\n    return state.transacao.dado;\n  });\n\n  if (conta && transacoes) {\n    const atualizacoesPaginaPrincipal = transacoes.slice(0, 4);\n\n    return (\n      <div>\n        <div className=\"container\">\n          <div>\n            <p className=\"saldo-titulo\">Saldo</p>\n            <p className=\"saldo\">R${maskValor(conta.saldo)}</p>\n            <p className=\"saldo-Rendimento\">\n              Rendimento{\" \"}\n              <span className=\"rendimento\">\n                R${maskValor(conta.rendimento)}\n              </span>\n            </p>\n            <GraficoRendimentos\n              saldo={conta.saldo}\n              rendimento={conta.rendimento / 100}\n            />\n          </div>\n\n          <div className=\"cards\">\n            <p className=\"atualizacao-titulo\">Ultimas atualizações</p>\n            <p className=\"saldo\">\n              {atualizacoesPaginaPrincipal.map((transacao, index) => {\n                return (\n                  <div key={index} className=\"item-atualizacao\">\n                    <div className=\"informacoes\">\n                      <span>{transacao.tipo}</span>\n                      <span> {maskData(transacao.dataHoraTransacao)}</span>\n                    </div>\n                    <div className=\"informacoes\">\n                      <span>R${maskValor(transacao.valor)}</span>\n                      <span>{transacao.status}</span>\n                    </div>\n                  </div>\n                );\n              })}\n            </p>\n\n            <ModalListagem atualizacoes={transacoes} />\n\n            <div className=\"operacoes\">\n              <ModalDeposito contaId={conta._id} />\n\n              <ModalResgate contaId={conta._id} />\n\n              <ModalPagamento contaId={conta._id} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return <div>Nenhum conta encontra</div>;\n  }\n}\n\nexport default Conta;\n","import React from \"react\";\nimport Conta from \"../services/conta/conta\";\n\nfunction Index() {\n  return (\n    <div className=\"site-container\">\n      <Conta />\n    </div>\n  );\n}\n\nexport default Index;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Index from \"./pages/index\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Route path=\"/\" exact component={Index}></Route>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { clienteReducer } from \"./services/cliente/cliente.redux\";\nimport { contaReducer } from \"./services/conta/conta.redux.js\";\nimport { registrarDepositoReducer } from \"./services/registrar-deposito/registrar-deposito\";\nimport { registrarPagamentoReducer } from \"./services/registrar-pagamento/registrar-pagamento\";\nimport { registrarResgateReducer } from \"./services/registrar-resgate/registrar-resgate\";\nimport { transacaoReducer } from \"./services/transacao/transacao\";\n\nconst initialState = {};\nconst reducer = combineReducers({\n  contaUsuario: contaReducer,\n  deposito: registrarDepositoReducer,\n  resgate: registrarResgateReducer,\n  transacao: transacaoReducer,\n  pagamento: registrarPagamentoReducer,\n  cliente: clienteReducer,\n});\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  initialState,\n  composeEnhancer(applyMiddleware(thunk)) //Todo: aprender sobre o compose\n);\n\nexport default store;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}